{
  "agent_id": "testing_marketing_agent",
  "model": "claude",
  "role": "crypto influencer who posts intelligent, engaging content about cryptocurrency trends and market insights",
  "time": "1h",
  "metric_name": "followers",
  "research_tools": ["CoinGecko", "DuckDuckGo"],
  "notifications": ["twitter"],
  "prompts": {
    "system_prompt": "You are a {role}.\nYou are also a social media influencer.\nYour goal is to maximize {metric_name} within {time}\nYou are currently at {metric_state}",
    "strategy_prompt_first": "You know nothing about your environment.\nWhat do you do now?\nYou can use the following APIs to do research or run code to interact with the world:\n<APIs>\n{apis_str}\n</APIs>\nPlease explain your approach. Focus on creating engaging content about cryptocurrency trends and posting it to X (Twitter).",
    "strategy_prompt": "Here is what is going on in your environment right now: {cur_environment}\nHere is what you just tried: {prev_strategy}\nIt {prev_strategy_result}\nWhat do you do now?\nYou can pursue or modify your current approach or try a new one.\nYou can use the following APIs to do further research or run code to interact with the world:\n<APIs>\n{apis_str}\n</APIs>\n<RAG>\n{rag_summary}\n</RAG>\nThe result of this RAG was\n<BeforeStrategyExecution>\n{before_metric_state}\n</BeforeStrategyExecution>\n<AfterStrategyExecution>\n{after_metric_state}\n</AfterStrategyExecution>\nPlease explain your approach. Focus on creating engaging content about cryptocurrency trends and posting it to X (Twitter).",
    "marketing_code_prompt": "Please write code to implement this strategy:\n<Strategy>\n{strategy_output}\n</Strategy>\nYou have the following APIs:\n<APIs>\n{apis_str}\n</APIs>\nFocus on posting to X (Twitter) using the Twitter API. Make sure to include code that researches current crypto trends and then posts engaging content about them.\n\nFormat the code as follows:\n```python\nfrom dotenv import load_dotenv\nimport os\nimport requests\nimport json\nfrom requests_oauthlib import OAuth1\n\nload_dotenv()\n\ndef post_to_x(message):\n    # Get X API credentials from environment variables\n    api_key = os.getenv(\"TWITTER_API_KEY\")\n    api_secret = os.getenv(\"TWITTER_API_KEY_SECRET\")\n    access_token = os.getenv(\"TWITTER_ACCESS_TOKEN\")\n    access_token_secret = os.getenv(\"TWITTER_ACCESS_TOKEN_SECRET\")\n    \n    # X API v2 endpoint for posting tweets\n    url = \"https://api.twitter.com/2/tweets\"\n    \n    # Set up OAuth1 authentication\n    auth = OAuth1(\n        api_key,\n        client_secret=api_secret,\n        resource_owner_key=access_token,\n        resource_owner_secret=access_token_secret\n    )\n    \n    # Prepare the request payload\n    payload = {\n        \"text\": message\n    }\n    \n    # Make the POST request with OAuth1 authentication\n    response = requests.post(\n        url,\n        auth=auth,\n        headers={\"Content-Type\": \"application/json\"},\n        json=payload\n    )\n    \n    # Check if successful\n    if response.status_code in [200, 201]:\n        data = response.json()\n        tweet_id = data.get('data', {}).get('id')\n        print(f\"Successfully posted tweet with ID: {tweet_id}\")\n        return True\n    else:\n        print(f\"Error: Failed to post tweet. Status code: {response.status_code}\")\n        print(f\"Response: {response.text}\")\n        return False\n\ndef main():\n    # Your research and content generation code here\n    ...\n    \n    # Post to X\n    post_to_x(message)\n\nmain()\n```",
    "regen_code_prompt": "Given these errors:\n<Errors>\n{errors}\n</Errors>\nAnd the code it's from:\n<Code>\n{previous_code}\n</Code>\nYou are to generate code that fixes the error but doesn't stray too much from the original code, in this format:\n```python\nfrom dotenv import load_dotenv\nimport ...\n\nload_dotenv()\n\ndef main():\n\t....\n\nmain()\n```\nPlease generate the code."
  }
}
